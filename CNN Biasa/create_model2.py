# -*- coding: utf-8 -*-
"""Create_Model2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ob8AJTucK4PiIZJH8HRAhTj_JFyoRsU_
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers, Sequential
from tensorflow.keras.models import Model
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, Activation
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import os

from google.colab import drive
drive.mount('/content/drive')

# Parameter
batch_size = 16
dimension = (150, 150)
epoch = 20

datagenerator = ImageDataGenerator(
        rescale = 1./255,
        zoom_range = 0.2,
        shear_range = 0.2,
        horizontal_flip = True,
)

train_generator = datagenerator.flow_from_directory(
    directory = '/content/drive/MyDrive/Colab Notebooks/Data Pitaya(Validasi)/train',
    target_size = dimension,
    batch_size = batch_size,
    class_mode = "categorical",
    shuffle = True,
)
val_generator = datagenerator.flow_from_directory(
    directory = '/content/drive/MyDrive/Colab Notebooks/Data Pitaya(Validasi)/validation',
    target_size = dimension,
    batch_size = batch_size,
    class_mode = "categorical",
    shuffle = True,
)
test_generator = datagenerator.flow_from_directory(
    directory = '/content/drive/MyDrive/Colab Notebooks/Data Pitaya(Validasi)/test',
    target_size = dimension,
    batch_size = batch_size,
    class_mode = "categorical",
    shuffle = False,
)

num_class = train_generator.num_classes
print(num_class)

model = Sequential()

model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (2, 2), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(1024, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_class, activation='softmax'))

# model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))
# model.add(MaxPooling2D(pool_size=(2, 2), padding='same'))
# model.add(Conv2D(64, (3, 3), activation='relu'))
# model.add(MaxPooling2D(pool_size=(2, 2)))
# model.add(Conv2D(128, (3, 3), activation='relu'))
# model.add(MaxPooling2D(pool_size=(2, 2)))
# model.add(Flatten())
# model.add(Dense(64, activation='relu'))
# model.add(Dropout(0.5))
# model.add(Dense(num_class, activation='softmax'))


# model.add(Conv2D(16, (3, 3), padding='same', activation='relu', input_shape=(64, 64, 3)))
# model.add(MaxPooling2D())
# model.add(Conv2D(32, (3, 3), padding='same', activation='relu'))
# model.add(MaxPooling2D())
# model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))
# model.add(MaxPooling2D())
# model.add(Flatten())
# model.add(Dense(128, activation='relu'))
# model.add(Dense(num_class))

model.summary()

model.compile(loss="categorical_crossentropy",
              optimizer="adam",
              metrics=['accuracy'])

history = model.fit(train_generator,
          validation_data = val_generator,
          steps_per_epoch = len(train_generator),
          validation_steps = len(val_generator),
          epochs = epoch)

# Save Model
base_path = "/content/drive/My Drive/Colab Notebooks/model"
project_name = "pitaya"
model_name = "model20_model2.h5"
model_path = os.path.join(base_path, project_name, model_name)

if os.path.exists(os.path.join(base_path, project_name)) == False:
    os.makedirs(os.path.join(base_path, project_name))
    
print('Saving Model At {}...'.format(model_path))
model.save(model_path, include_optimizer = False)

# model evaluate
loss, acc = model.evaluate(test_generator, steps = len(test_generator))
print('Accuracy pada data test: {:.4f} \nLoss pada data training: {:.4f}'.format(acc, loss), '\n')

loss, acc = model.evaluate(test_generator, steps = len(test_generator))
print('Accuracy pada data test: {:.4f} \nLoss pada data test: {:.4f}'.format(acc, loss), '\n')